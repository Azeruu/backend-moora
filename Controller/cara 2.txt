export const createHasil = async (req, res) => {
  try {
    const nilai_alternatif = await NilaiAlternatif.findAll();
    const data_alternatif = await Alternatif.findAll();

    const groupedData = {};
    nilai_alternatif.forEach(({ nama_alternatif, nama_kriteria, nilai_fuzzy }) => {
        groupedData[nama_kriteria] = groupedData[nama_kriteria] || [];
        groupedData[nama_kriteria].push({ nama_alternatif, nilai_fuzzy });
    });

    const squareRootValues = {};
    for (const [nama_kriteria, data] of Object.entries(groupedData)) {
        const totalSquaredValue = data.reduce((total, { nilai_fuzzy }) => total + Math.pow(nilai_fuzzy, 2), 0);
        squareRootValues[nama_kriteria] = Math.sqrt(totalSquaredValue);
    }

    const dividedValues = {};
    for (const [nama_kriteria, data] of Object.entries(groupedData)) {
        const squareRootValue = squareRootValues[nama_kriteria];
        dividedValues[nama_kriteria] = data.map(({ nama_alternatif, nilai_fuzzy }) => ({
            nama_alternatif,
            nilai_fuzzy: nilai_fuzzy / squareRootValue
        }));
    }

    const bobotKriteria = {};
    const dataKriteria = await Kriteria.findAll();
    dataKriteria.forEach(({ nama_kriteria, bobot_kriteria }) => {
        bobotKriteria[nama_kriteria] = bobot_kriteria;
    });

    const multipliedValues = {};
    for (const [nama_kriteria, data] of Object.entries(dividedValues)) {
        const bobot = bobotKriteria[nama_kriteria];
        multipliedValues[nama_kriteria] = data.map(({ nama_alternatif, nilai_fuzzy }) => ({
            nama_alternatif,
            nilai_fuzzy: nilai_fuzzy * bobot
        }));
    }

    const summedValues = {};
    for (const [nama_kriteria, data] of Object.entries(multipliedValues)) {
        data.forEach(({ nama_alternatif, nilai_fuzzy }) => {
            summedValues[nama_alternatif] = 
            (summedValues[nama_alternatif] || 0) + (nilai_fuzzy * (nama_kriteria === "Rata - Rata Nilai Rapot" || nama_kriteria === "Usia" ? 1 : -1));
        });
    }

    // console.log(summedValues);
    try {
      // Menyimpan hasil penjumlahan per alternatif ke dalam tabel Hasil
      for (const [nama_alternatif, nilai_fuzzy] of Object.entries(summedValues)) {
        // Cari data dalam tabel Hasil dengan nama_alternatif dan jalur_pendaftaran yang sama
        const existingData = await Hasil.findOne({
          where: {
            nama_alternatif,
            jalur_pendaftaran: data_alternatif.find(({ nama_alternatif: nama }) => nama === nama_alternatif)?.nama_jalur
          }
        });

        // Jika data sudah ada, lewati proses penambahan data baru
        if (existingData) continue;

        // Jika tidak ada data yang sama, masukkan hasil ke dalam tabel Hasil
        await Hasil.create({
            nama_alternatif: nama_alternatif,
            jalur_pendaftaran: data_alternatif.find(({ nama_alternatif: nama }) => nama === nama_alternatif)?.nama_jalur,
            nilai: nilai_fuzzy,
            userId: req.params.id
        });
      }
    } catch (error) {
        console.error("Gagal menginput data hasil kedalam tabel Hasil", error);
        // Tangani kesalahan jika penyisipan gagal
        return res.status(500).json({ msg: "Terjadi kesalahan pada server" });
      }
    // Beri respons dengan pesan sukses setelah semua catatan dimasukkan
    res.status(201).json({ msg: "Data Hasil Berhasil Diinput atau Diperbarui" });
  } catch (error) {
    console.error("Error:", error);
    // Tangani kesalahan jika pengambilan catatan gagal
    res.status(500).json({ msg: "Terjadi kesalahan pada server" });
  }
};